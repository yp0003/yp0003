<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/task   
	http://www.springframework.org/schema/task/spring-task-4.0.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-4.0.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache-4.0.xsd"
	default-autowire="byName">

	<!-- enable Autowired -->
	<context:annotation-config />
	<!-- 启动AspectJ支持 -->
	<aop:aspectj-autoproxy />

	<!-- 配置注解搜索的范围,该例子中spring会自动搜索com.yfann.web下面的注解 -->
	<context:component-scan base-package="com.yfann.web" />


	<!-- 线程池配置 -->
	<task:executor id="taskExecutor" pool-size="10" />
	<!-- 测试环境配置信息 -->
	<util:properties id="config" location="classpath:config.properties" />

	<!-- ****************************** 数据库定义 ****************************** -->
	<bean id="mainDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="#{config['jdbc.driverClass']}" />
		<property name="url" value="#{config['jdbc.url']}" />
		<property name="username" value="#{config['jdbc.username']}" />
		<property name="password" value="#{config['jdbc.password']}" />
		<!-- 配置初始化大小 -->
		<property name="initialSize" value="10" />
		<!-- 连接池中可同时连接的最大的连接数 -->
		<property name="maxActive" value="100" />
		<!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放,如果设置为负数表示不限制 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接 -->
		<property name="minIdle" value="10" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="180000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<!-- <property name="minEvictableIdleTimeMillis" value="1800000" /> -->
		<!-- 超过时间限制，回收没有用(废弃)的连接 -->
		<property name="removeAbandonedTimeout" value="300" />
		<!-- 超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true) -->
		<property name="removeAbandoned" value="true" />
		<!-- 自动提交 -->
		<property name="defaultAutoCommit" value="false" />
		<!-- <property name="connectionProperties" value="bigStringTryClob=true;clientEncoding=UTF-8;defaultRowPrefetch=10;serverEncoding=UTF-8" 
			/> -->
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		<!-- 代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接. -->
		<property name="numTestsPerEvictionRun" value="50" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒（15分钟） -->
		<property name="timeBetweenEvictionRunsMillis" value="900000" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="50" />
	</bean>

	<!-- ****************************** 事务AOP定义 ****************************** -->
	<!-- 事务管理器的定义 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mainDataSource" />
	</bean>

	<!-- 事务拦截器的定义 -->
	<!-- 事务设定方法以及运行模式的定义 transaction-manager="transactionManager" 的设定可以省略 -->
	<tx:advice id="transactionInterceptor" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true"
				rollback-for="java.lang.Exception" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true"
				rollback-for="java.lang.Exception" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true"
				rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- AOP的定义 -->
	<!--拦截器只对一下的Bean适用 -注意：只针对在applicationContext.xml里定义的Bean对象有效 -->
	<aop:config>
		<aop:pointcut id="daoBeans"
			expression="execution(* com.yfann.web.service.*.*(..))" />
		<aop:advisor pointcut-ref="daoBeans" advice-ref="transactionInterceptor" />
	</aop:config>

	<!-- ****************************** ibatis定义 ****************************** -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mainDataSource" />
		<!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效 -->
		<property name="configLocation" value="classpath:myBatis-Configuration.xml" />
	</bean>

	<!-- MyBatis注入sqlSessionFactory -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- Mapper接口所在包名，basePackage 属性是让你为映射器接口文件设置基本的包路径。 -->
		<property name="basePackage" value="com.yfann.web.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- Cache -->
	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<cache:annotation-driven cache-manager="mainCacheManager" />
	<context:component-scan base-package="com.yfann.web" />
	<!-- spring cache -->
	<bean id="mainCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cacheManager-ref="cacheManagerFactory" />
	<!-- ehcache cacheManager -->
	<bean id="cacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:configLocation="classpath:/ehcache.xml" p:shared="true" scope="singleton" />

</beans>